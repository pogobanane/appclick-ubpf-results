path '/home/okelmann/appclick-ubpf/benchmark' does not contain a 'flake.nix', searching up
warning: Git tree '/home/okelmann/appclick-ubpf' is dirty
Using saved setting for 'extra-substituters = https://tum-dse.cachix.org' from ~/.local/share/nix/trusted-settings.json.
Using saved setting for 'extra-trusted-public-keys = tum-dse.cachix.org-1:v67rK18oLwgO0Z4b69l30SrV1yRtqxKpiHodG4YxhNM=' from ~/.local/share/nix/trusted-settings.json.
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.20s
     Running `target/debug/bench-helper`
c[?7l[2J[0mSeaBIOS (version rel-1.16.2-0-gea1b7a073390-prebuilt.qemu.org)


iPXE (http://ipxe.org) 00:03.0 CA00 PCI2.10 PnP PMM+BEFD0F40+BEF30F40 CA00
Press Ctrl-B to configure iPXE (PCI 00:03.0)...                                                                               


Booting from ROM..Powered by
o.   .o       _ _               __ _
Oo   Oo  ___ (_) | __ __  __ _ ' _) :_
oO   oO ' _ `| | |/ /  _)' _` | |_|  _)
oOo oOO| | | | |   (| | | (_) |  _) :_
 OoOoO ._, ._:_:_,\_._,  .__,_:_, \___)
         Telesto 0.16.3~e453b74a-custom
Startup trace (nsec): click main(): 107269524
Startup trace (nsec): print config: 108686205
Received config (length 5697):
define($MAC0 52:54:00:12:34:56);
/* End unikraft-provided MAC preamble */
// From: https://github.com/kohler/click/blob/master/conf/thomer-nat.click
// Slightly modified to be compatible with Click on Unikraft. Functionality not guaranteed.
//
// This Click configuration implements a firewall and NAT, roughly based on the
// mazu-nat.click example.
//
// This example assumes there is one interface that is IP-aliased.  In this
// example, dev0 and dev0:0 have IP addresses 66.68.65.90 and 192.168.1.1,
// respectively.  There is a local network, 192.168.1.0/24, and an upstream
// gateway, 66.58.65.89.  Traffic from the local network is NATed.
//
// Connections can be initiated from the NAT box itself, also.
// 
// For bugs, suggestions, and, corrections, please email me.
//
// Author: Thomer M. Gil (click@thomer.com)

define($DEV0 0)

AddressInfo(
    dev0-in     172.44.0.2    172.44.0.2/24    00:0d:87:9d:1c:e9,
    dev0-ex     172.44.0.3                     00:0d:87:9d:1c:e9,
    gw-addr     172.44.0.1                     00:20:6f:14:54:c2
);


elementclass SniffGatewayDevice {
  $device |
  from :: FromDevice($device)
    -> Print2('Received packet from device')
    -> t1 :: Tee
    -> output;
  input -> q :: Queue(1024)
    -> t2 :: PullTee
    -> to :: ToDevice($device);
  t1[1] -> ToDevice;
  t2[1] -> ToDevice($device);
  ScheduleInfo(from .1, to 1);
}


device :: SniffGatewayDevice($DEV0);
arpq_in :: ARPQuerier(dev0-in) -> device;
ip_to_extern :: GetIPAddress(16)
        -> CheckIPHeader
        -> EtherEncap(0x800, dev0-ex, gw-addr)
        -> device;
ip_to_host :: EtherEncap(0x800, gw-addr, dev0-ex)
        -> ToDevice;
ip_to_intern :: GetIPAddress(16)
        -> CheckIPHeader
        -> arpq_in;

                 
arp_class :: Classifier(
        12/0806 20/0001,        // [0] ARP requests
        12/0806 20/0002,        // [1] ARP replies to host
        12/0800);               // [2] IP packets

device -> arp_class;

// ARP crap
arp_class[0] -> ARPResponder(dev0-in, dev0-ex) -> device;
arp_class[1] -> arp_t :: Tee;
                arp_t[0] -> ToDevice;
                arp_t[1] -> [1]arpq_in;


// IP packets
arp_class[2] -> Strip(14)
   -> CheckIPHeader
   -> ipclass :: IPClassifier(dst host dev0-ex,
                              dst host dev0-in,
                              src net dev0-in);

// Define pattern NAT
iprw :: IPRewriterPatterns(NAT dev0-ex 50000-65535 - -);

// Rewriting rules for UDP/TCP packets
// output[0] rewritten to go into the wild
// output[1] rewritten to come back from the wild or no match
rw :: IPRewriter(pattern NAT 0 1,
                 pass 1);

// Rewriting rules for ICMP packets
irw :: ICMPPingRewriter(pass);
irw[0] -> ip_to_extern;
irw[1] -> icmp_me_or_intern :: IPClassifier(dst host dev0-ex, -);
          icmp_me_or_intern[0] -> ip_to_host;
          icmp_me_or_intern[1] -> ip_to_intern;

// Rewriting rules for ICMP error packets
ierw :: ICMPRewriter(rw irw);
ierw[0] -> icmp_me_or_intern;
ierw[1] -> icmp_me_or_intern;


// Packets directed at dev0-ex.
// Send it through IPRewriter(pass).  If there was a mapping, it will be
// rewritten such that dst is dev0-in:net, otherwise dst will still be for
// dev0-ex.
ipclass[0] -> Print("->1x") -> [1]rw;

// packets that were rewritten, heading into the wild world.
rw[0] -> Print("0->") -> ip_to_extern;

// packets that come back from the wild or are not part of an established
// connection.
rw[1] -> Print("1->") -> established_class :: IPClassifier(dst host dev0-ex,
                                           dst net dev0-in);

         // not established yet or returning packets for a connection that was
         // established from this host itself.
         established_class[0] ->
           firewall :: IPClassifier(dst tcp port ssh,
                                    dst tcp port smtp,
                                    dst tcp port domain,
                                    dst udp port domain,
                                    icmp type echo-reply,
                                    proto icmp,
                                    port > 4095,
                                    -);

                                    firewall[0] -> ip_to_host; // ssh
                                    firewall[1] -> ip_to_host; // smtp
                                    firewall[2] -> ip_to_host; // domain (t)
                                    firewall[3] -> ip_to_host; // domain (u)
                                    firewall[4] -> [0]irw;     // icmp reply
                                    firewall[5] -> [0]ierw;    // other icmp
                                    firewall[6] -> ip_to_host; // port > 4095, probably for connection
                                                               // originating from host itself
                                    firewall[7] -> Discard;    // don't allow incoming for port <= 4095

        // established connection
        established_class[1] -> ip_to_intern;

// To dev0-in.  Only accept from inside network.
ipclass[1] -> IPClassifier(src net dev0-in) -> ip_to_host;

// Packets from dev0-in:net either stay on local network or go to the wild.
// Those that go into the wild need to go through the appropriate rewriting
// element.  (Either UDP/TCP rewriter or ICMP rewriter.)
ipclass[2] -> inter_class :: IPClassifier(dst net dev0-in, -);
              inter_class[0] -> ip_to_intern;
              inter_class[1] -> ip_udp_class :: IPClassifier(tcp or udp,
                                                             icmp type echo);
                                ip_udp_class[0] -> Print("->0") -> [0]rw;
                                ip_udp_class[1] -> [0]irw;

Startup trace (nsec): print config done: 523330857
Startup trace (nsec): initialize elements: 526701002
Startup trace (nsec): initialize elements done: 530642409
[router_thread:250] Starting driver...


Received packet from device: 540803623 ns:   72 | 01005e00 0016767e 90d49854 080046c0 00300000 40000102
qemu-system-x86_64: terminating on signal 1 from pid 4090189 (sudo)
Bench-helper startup time (nsec): 676039301
path '/home/okelmann/appclick-ubpf/benchmark' does not contain a 'flake.nix', searching up
warning: Git tree '/home/okelmann/appclick-ubpf' is dirty
Using saved setting for 'extra-substituters = https://tum-dse.cachix.org' from ~/.local/share/nix/trusted-settings.json.
Using saved setting for 'extra-trusted-public-keys = tum-dse.cachix.org-1:v67rK18oLwgO0Z4b69l30SrV1yRtqxKpiHodG4YxhNM=' from ~/.local/share/nix/trusted-settings.json.
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.18s
     Running `target/debug/bench-helper`
c[?7l[2J[0mSeaBIOS (version rel-1.16.2-0-gea1b7a073390-prebuilt.qemu.org)


iPXE (http://ipxe.org) 00:03.0 CA00 PCI2.10 PnP PMM+BEFD0F40+BEF30F40 CA00
Press Ctrl-B to configure iPXE (PCI 00:03.0)...                                                                               


Booting from ROM..Powered by
o.   .o       _ _               __ _
Oo   Oo  ___ (_) | __ __  __ _ ' _) :_
oO   oO ' _ `| | |/ /  _)' _` | |_|  _)
oOo oOO| | | | |   (| | | (_) |  _) :_
 OoOoO ._, ._:_:_,\_._,  .__,_:_, \___)
         Telesto 0.16.3~e453b74a-custom
Startup trace (nsec): click main(): 107250603
Startup trace (nsec): print config: 108683514
Received config (length 5697):
define($MAC0 52:54:00:12:34:56);
/* End unikraft-provided MAC preamble */
// From: https://github.com/kohler/click/blob/master/conf/thomer-nat.click
// Slightly modified to be compatible with Click on Unikraft. Functionality not guaranteed.
//
// This Click configuration implements a firewall and NAT, roughly based on the
// mazu-nat.click example.
//
// This example assumes there is one interface that is IP-aliased.  In this
// example, dev0 and dev0:0 have IP addresses 66.68.65.90 and 192.168.1.1,
// respectively.  There is a local network, 192.168.1.0/24, and an upstream
// gateway, 66.58.65.89.  Traffic from the local network is NATed.
//
// Connections can be initiated from the NAT box itself, also.
// 
// For bugs, suggestions, and, corrections, please email me.
//
// Author: Thomer M. Gil (click@thomer.com)

define($DEV0 0)

AddressInfo(
    dev0-in     172.44.0.2    172.44.0.2/24    00:0d:87:9d:1c:e9,
    dev0-ex     172.44.0.3                     00:0d:87:9d:1c:e9,
    gw-addr     172.44.0.1                     00:20:6f:14:54:c2
);


elementclass SniffGatewayDevice {
  $device |
  from :: FromDevice($device)
    -> Print2('Received packet from device')
    -> t1 :: Tee
    -> output;
  input -> q :: Queue(1024)
    -> t2 :: PullTee
    -> to :: ToDevice($device);
  t1[1] -> ToDevice;
  t2[1] -> ToDevice($device);
  ScheduleInfo(from .1, to 1);
}


device :: SniffGatewayDevice($DEV0);
arpq_in :: ARPQuerier(dev0-in) -> device;
ip_to_extern :: GetIPAddress(16)
        -> CheckIPHeader
        -> EtherEncap(0x800, dev0-ex, gw-addr)
        -> device;
ip_to_host :: EtherEncap(0x800, gw-addr, dev0-ex)
        -> ToDevice;
ip_to_intern :: GetIPAddress(16)
        -> CheckIPHeader
        -> arpq_in;

                 
arp_class :: Classifier(
        12/0806 20/0001,        // [0] ARP requests
        12/0806 20/0002,        // [1] ARP replies to host
        12/0800);               // [2] IP packets

device -> arp_class;

// ARP crap
arp_class[0] -> ARPResponder(dev0-in, dev0-ex) -> device;
arp_class[1] -> arp_t :: Tee;
                arp_t[0] -> ToDevice;
                arp_t[1] -> [1]arpq_in;


// IP packets
arp_class[2] -> Strip(14)
   -> CheckIPHeader
   -> ipclass :: IPClassifier(dst host dev0-ex,
                              dst host dev0-in,
                              src net dev0-in);

// Define pattern NAT
iprw :: IPRewriterPatterns(NAT dev0-ex 50000-65535 - -);

// Rewriting rules for UDP/TCP packets
// output[0] rewritten to go into the wild
// output[1] rewritten to come back from the wild or no match
rw :: IPRewriter(pattern NAT 0 1,
                 pass 1);

// Rewriting rules for ICMP packets
irw :: ICMPPingRewriter(pass);
irw[0] -> ip_to_extern;
irw[1] -> icmp_me_or_intern :: IPClassifier(dst host dev0-ex, -);
          icmp_me_or_intern[0] -> ip_to_host;
          icmp_me_or_intern[1] -> ip_to_intern;

// Rewriting rules for ICMP error packets
ierw :: ICMPRewriter(rw irw);
ierw[0] -> icmp_me_or_intern;
ierw[1] -> icmp_me_or_intern;


// Packets directed at dev0-ex.
// Send it through IPRewriter(pass).  If there was a mapping, it will be
// rewritten such that dst is dev0-in:net, otherwise dst will still be for
// dev0-ex.
ipclass[0] -> Print("->1x") -> [1]rw;

// packets that were rewritten, heading into the wild world.
rw[0] -> Print("0->") -> ip_to_extern;

// packets that come back from the wild or are not part of an established
// connection.
rw[1] -> Print("1->") -> established_class :: IPClassifier(dst host dev0-ex,
                                           dst net dev0-in);

         // not established yet or returning packets for a connection that was
         // established from this host itself.
         established_class[0] ->
           firewall :: IPClassifier(dst tcp port ssh,
                                    dst tcp port smtp,
                                    dst tcp port domain,
                                    dst udp port domain,
                                    icmp type echo-reply,
                                    proto icmp,
                                    port > 4095,
                                    -);

                                    firewall[0] -> ip_to_host; // ssh
                                    firewall[1] -> ip_to_host; // smtp
                                    firewall[2] -> ip_to_host; // domain (t)
                                    firewall[3] -> ip_to_host; // domain (u)
                                    firewall[4] -> [0]irw;     // icmp reply
                                    firewall[5] -> [0]ierw;    // other icmp
                                    firewall[6] -> ip_to_host; // port > 4095, probably for connection
                                                               // originating from host itself
                                    firewall[7] -> Discard;    // don't allow incoming for port <= 4095

        // established connection
        established_class[1] -> ip_to_intern;

// To dev0-in.  Only accept from inside network.
ipclass[1] -> IPClassifier(src net dev0-in) -> ip_to_host;

// Packets from dev0-in:net either stay on local network or go to the wild.
// Those that go into the wild need to go through the appropriate rewriting
// element.  (Either UDP/TCP rewriter or ICMP rewriter.)
ipclass[2] -> inter_class :: IPClassifier(dst net dev0-in, -);
              inter_class[0] -> ip_to_intern;
              inter_class[1] -> ip_udp_class :: IPClassifier(tcp or udp,
                                                             icmp type echo);
                                ip_udp_class[0] -> Print("->0") -> [0]rw;
                                ip_udp_class[1] -> [0]irw;

Startup trace (nsec): print config done: 519358659
Startup trace (nsec): initialize elements: 522698836
Startup trace (nsec): initialize elements done: 526568601
[router_thread:250] Starting driver...


Received packet from device: 536613463 ns:  120 | 33330000 0016feaf 08cf6969 86dd6000 00000038 00010000
qemu-system-x86_64: terminating on signal 1 from pid 4090410 (sudo)
Bench-helper startup time (nsec): 671567728
path '/home/okelmann/appclick-ubpf/benchmark' does not contain a 'flake.nix', searching up
warning: Git tree '/home/okelmann/appclick-ubpf' is dirty
Using saved setting for 'extra-substituters = https://tum-dse.cachix.org' from ~/.local/share/nix/trusted-settings.json.
Using saved setting for 'extra-trusted-public-keys = tum-dse.cachix.org-1:v67rK18oLwgO0Z4b69l30SrV1yRtqxKpiHodG4YxhNM=' from ~/.local/share/nix/trusted-settings.json.
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.18s
     Running `target/debug/bench-helper`
c[?7l[2J[0mSeaBIOS (version rel-1.16.2-0-gea1b7a073390-prebuilt.qemu.org)


iPXE (http://ipxe.org) 00:03.0 CA00 PCI2.10 PnP PMM+BEFD0F40+BEF30F40 CA00
Press Ctrl-B to configure iPXE (PCI 00:03.0)...                                                                               


Booting from ROM..Powered by
o.   .o       _ _               __ _
Oo   Oo  ___ (_) | __ __  __ _ ' _) :_
oO   oO ' _ `| | |/ /  _)' _` | |_|  _)
oOo oOO| | | | |   (| | | (_) |  _) :_
 OoOoO ._, ._:_:_,\_._,  .__,_:_, \___)
         Telesto 0.16.3~e453b74a-custom
Startup trace (nsec): click main(): 107258064
Startup trace (nsec): print config: 108683125
Received config (length 5697):
define($MAC0 52:54:00:12:34:56);
/* End unikraft-provided MAC preamble */
// From: https://github.com/kohler/click/blob/master/conf/thomer-nat.click
// Slightly modified to be compatible with Click on Unikraft. Functionality not guaranteed.
//
// This Click configuration implements a firewall and NAT, roughly based on the
// mazu-nat.click example.
//
// This example assumes there is one interface that is IP-aliased.  In this
// example, dev0 and dev0:0 have IP addresses 66.68.65.90 and 192.168.1.1,
// respectively.  There is a local network, 192.168.1.0/24, and an upstream
// gateway, 66.58.65.89.  Traffic from the local network is NATed.
//
// Connections can be initiated from the NAT box itself, also.
// 
// For bugs, suggestions, and, corrections, please email me.
//
// Author: Thomer M. Gil (click@thomer.com)

define($DEV0 0)

AddressInfo(
    dev0-in     172.44.0.2    172.44.0.2/24    00:0d:87:9d:1c:e9,
    dev0-ex     172.44.0.3                     00:0d:87:9d:1c:e9,
    gw-addr     172.44.0.1                     00:20:6f:14:54:c2
);


elementclass SniffGatewayDevice {
  $device |
  from :: FromDevice($device)
    -> Print2('Received packet from device')
    -> t1 :: Tee
    -> output;
  input -> q :: Queue(1024)
    -> t2 :: PullTee
    -> to :: ToDevice($device);
  t1[1] -> ToDevice;
  t2[1] -> ToDevice($device);
  ScheduleInfo(from .1, to 1);
}


device :: SniffGatewayDevice($DEV0);
arpq_in :: ARPQuerier(dev0-in) -> device;
ip_to_extern :: GetIPAddress(16)
        -> CheckIPHeader
        -> EtherEncap(0x800, dev0-ex, gw-addr)
        -> device;
ip_to_host :: EtherEncap(0x800, gw-addr, dev0-ex)
        -> ToDevice;
ip_to_intern :: GetIPAddress(16)
        -> CheckIPHeader
        -> arpq_in;

                 
arp_class :: Classifier(
        12/0806 20/0001,        // [0] ARP requests
        12/0806 20/0002,        // [1] ARP replies to host
        12/0800);               // [2] IP packets

device -> arp_class;

// ARP crap
arp_class[0] -> ARPResponder(dev0-in, dev0-ex) -> device;
arp_class[1] -> arp_t :: Tee;
                arp_t[0] -> ToDevice;
                arp_t[1] -> [1]arpq_in;


// IP packets
arp_class[2] -> Strip(14)
   -> CheckIPHeader
   -> ipclass :: IPClassifier(dst host dev0-ex,
                              dst host dev0-in,
                              src net dev0-in);

// Define pattern NAT
iprw :: IPRewriterPatterns(NAT dev0-ex 50000-65535 - -);

// Rewriting rules for UDP/TCP packets
// output[0] rewritten to go into the wild
// output[1] rewritten to come back from the wild or no match
rw :: IPRewriter(pattern NAT 0 1,
                 pass 1);

// Rewriting rules for ICMP packets
irw :: ICMPPingRewriter(pass);
irw[0] -> ip_to_extern;
irw[1] -> icmp_me_or_intern :: IPClassifier(dst host dev0-ex, -);
          icmp_me_or_intern[0] -> ip_to_host;
          icmp_me_or_intern[1] -> ip_to_intern;

// Rewriting rules for ICMP error packets
ierw :: ICMPRewriter(rw irw);
ierw[0] -> icmp_me_or_intern;
ierw[1] -> icmp_me_or_intern;


// Packets directed at dev0-ex.
// Send it through IPRewriter(pass).  If there was a mapping, it will be
// rewritten such that dst is dev0-in:net, otherwise dst will still be for
// dev0-ex.
ipclass[0] -> Print("->1x") -> [1]rw;

// packets that were rewritten, heading into the wild world.
rw[0] -> Print("0->") -> ip_to_extern;

// packets that come back from the wild or are not part of an established
// connection.
rw[1] -> Print("1->") -> established_class :: IPClassifier(dst host dev0-ex,
                                           dst net dev0-in);

         // not established yet or returning packets for a connection that was
         // established from this host itself.
         established_class[0] ->
           firewall :: IPClassifier(dst tcp port ssh,
                                    dst tcp port smtp,
                                    dst tcp port domain,
                                    dst udp port domain,
                                    icmp type echo-reply,
                                    proto icmp,
                                    port > 4095,
                                    -);

                                    firewall[0] -> ip_to_host; // ssh
                                    firewall[1] -> ip_to_host; // smtp
                                    firewall[2] -> ip_to_host; // domain (t)
                                    firewall[3] -> ip_to_host; // domain (u)
                                    firewall[4] -> [0]irw;     // icmp reply
                                    firewall[5] -> [0]ierw;    // other icmp
                                    firewall[6] -> ip_to_host; // port > 4095, probably for connection
                                                               // originating from host itself
                                    firewall[7] -> Discard;    // don't allow incoming for port <= 4095

        // established connection
        established_class[1] -> ip_to_intern;

// To dev0-in.  Only accept from inside network.
ipclass[1] -> IPClassifier(src net dev0-in) -> ip_to_host;

// Packets from dev0-in:net either stay on local network or go to the wild.
// Those that go into the wild need to go through the appropriate rewriting
// element.  (Either UDP/TCP rewriter or ICMP rewriter.)
ipclass[2] -> inter_class :: IPClassifier(dst net dev0-in, -);
              inter_class[0] -> ip_to_intern;
              inter_class[1] -> ip_udp_class :: IPClassifier(tcp or udp,
                                                             icmp type echo);
                                ip_udp_class[0] -> Print("->0") -> [0]rw;
                                ip_udp_class[1] -> [0]irw;

Startup trace (nsec): print config done: 521730155
Startup trace (nsec): initialize elements: 525090591
Startup trace (nsec): initialize elements done: 529017628
[router_thread:250] Starting driver...


Received packet from device: 539119201 ns:  120 | 33330000 0016feb3 ada5e49c 86dd6000 00000038 00010000
qemu-system-x86_64: terminating on signal 1 from pid 4090632 (sudo)
Bench-helper startup time (nsec): 674815107
path '/home/okelmann/appclick-ubpf/benchmark' does not contain a 'flake.nix', searching up
warning: Git tree '/home/okelmann/appclick-ubpf' is dirty
Using saved setting for 'extra-substituters = https://tum-dse.cachix.org' from ~/.local/share/nix/trusted-settings.json.
Using saved setting for 'extra-trusted-public-keys = tum-dse.cachix.org-1:v67rK18oLwgO0Z4b69l30SrV1yRtqxKpiHodG4YxhNM=' from ~/.local/share/nix/trusted-settings.json.
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.18s
     Running `target/debug/bench-helper`
c[?7l[2J[0mSeaBIOS (version rel-1.16.2-0-gea1b7a073390-prebuilt.qemu.org)


iPXE (http://ipxe.org) 00:03.0 CA00 PCI2.10 PnP PMM+BEFD0F40+BEF30F40 CA00
Press Ctrl-B to configure iPXE (PCI 00:03.0)...                                                                               


Booting from ROM..Powered by
o.   .o       _ _               __ _
Oo   Oo  ___ (_) | __ __  __ _ ' _) :_
oO   oO ' _ `| | |/ /  _)' _` | |_|  _)
oOo oOO| | | | |   (| | | (_) |  _) :_
 OoOoO ._, ._:_:_,\_._,  .__,_:_, \___)
         Telesto 0.16.3~e453b74a-custom
Startup trace (nsec): click main(): 107231862
Startup trace (nsec): print config: 108649717
Received config (length 5697):
define($MAC0 52:54:00:12:34:56);
/* End unikraft-provided MAC preamble */
// From: https://github.com/kohler/click/blob/master/conf/thomer-nat.click
// Slightly modified to be compatible with Click on Unikraft. Functionality not guaranteed.
//
// This Click configuration implements a firewall and NAT, roughly based on the
// mazu-nat.click example.
//
// This example assumes there is one interface that is IP-aliased.  In this
// example, dev0 and dev0:0 have IP addresses 66.68.65.90 and 192.168.1.1,
// respectively.  There is a local network, 192.168.1.0/24, and an upstream
// gateway, 66.58.65.89.  Traffic from the local network is NATed.
//
// Connections can be initiated from the NAT box itself, also.
// 
// For bugs, suggestions, and, corrections, please email me.
//
// Author: Thomer M. Gil (click@thomer.com)

define($DEV0 0)

AddressInfo(
    dev0-in     172.44.0.2    172.44.0.2/24    00:0d:87:9d:1c:e9,
    dev0-ex     172.44.0.3                     00:0d:87:9d:1c:e9,
    gw-addr     172.44.0.1                     00:20:6f:14:54:c2
);


elementclass SniffGatewayDevice {
  $device |
  from :: FromDevice($device)
    -> Print2('Received packet from device')
    -> t1 :: Tee
    -> output;
  input -> q :: Queue(1024)
    -> t2 :: PullTee
    -> to :: ToDevice($device);
  t1[1] -> ToDevice;
  t2[1] -> ToDevice($device);
  ScheduleInfo(from .1, to 1);
}


device :: SniffGatewayDevice($DEV0);
arpq_in :: ARPQuerier(dev0-in) -> device;
ip_to_extern :: GetIPAddress(16)
        -> CheckIPHeader
        -> EtherEncap(0x800, dev0-ex, gw-addr)
        -> device;
ip_to_host :: EtherEncap(0x800, gw-addr, dev0-ex)
        -> ToDevice;
ip_to_intern :: GetIPAddress(16)
        -> CheckIPHeader
        -> arpq_in;

                 
arp_class :: Classifier(
        12/0806 20/0001,        // [0] ARP requests
        12/0806 20/0002,        // [1] ARP replies to host
        12/0800);               // [2] IP packets

device -> arp_class;

// ARP crap
arp_class[0] -> ARPResponder(dev0-in, dev0-ex) -> device;
arp_class[1] -> arp_t :: Tee;
                arp_t[0] -> ToDevice;
                arp_t[1] -> [1]arpq_in;


// IP packets
arp_class[2] -> Strip(14)
   -> CheckIPHeader
   -> ipclass :: IPClassifier(dst host dev0-ex,
                              dst host dev0-in,
                              src net dev0-in);

// Define pattern NAT
iprw :: IPRewriterPatterns(NAT dev0-ex 50000-65535 - -);

// Rewriting rules for UDP/TCP packets
// output[0] rewritten to go into the wild
// output[1] rewritten to come back from the wild or no match
rw :: IPRewriter(pattern NAT 0 1,
                 pass 1);

// Rewriting rules for ICMP packets
irw :: ICMPPingRewriter(pass);
irw[0] -> ip_to_extern;
irw[1] -> icmp_me_or_intern :: IPClassifier(dst host dev0-ex, -);
          icmp_me_or_intern[0] -> ip_to_host;
          icmp_me_or_intern[1] -> ip_to_intern;

// Rewriting rules for ICMP error packets
ierw :: ICMPRewriter(rw irw);
ierw[0] -> icmp_me_or_intern;
ierw[1] -> icmp_me_or_intern;


// Packets directed at dev0-ex.
// Send it through IPRewriter(pass).  If there was a mapping, it will be
// rewritten such that dst is dev0-in:net, otherwise dst will still be for
// dev0-ex.
ipclass[0] -> Print("->1x") -> [1]rw;

// packets that were rewritten, heading into the wild world.
rw[0] -> Print("0->") -> ip_to_extern;

// packets that come back from the wild or are not part of an established
// connection.
rw[1] -> Print("1->") -> established_class :: IPClassifier(dst host dev0-ex,
                                           dst net dev0-in);

         // not established yet or returning packets for a connection that was
         // established from this host itself.
         established_class[0] ->
           firewall :: IPClassifier(dst tcp port ssh,
                                    dst tcp port smtp,
                                    dst tcp port domain,
                                    dst udp port domain,
                                    icmp type echo-reply,
                                    proto icmp,
                                    port > 4095,
                                    -);

                                    firewall[0] -> ip_to_host; // ssh
                                    firewall[1] -> ip_to_host; // smtp
                                    firewall[2] -> ip_to_host; // domain (t)
                                    firewall[3] -> ip_to_host; // domain (u)
                                    firewall[4] -> [0]irw;     // icmp reply
                                    firewall[5] -> [0]ierw;    // other icmp
                                    firewall[6] -> ip_to_host; // port > 4095, probably for connection
                                                               // originating from host itself
                                    firewall[7] -> Discard;    // don't allow incoming for port <= 4095

        // established connection
        established_class[1] -> ip_to_intern;

// To dev0-in.  Only accept from inside network.
ipclass[1] -> IPClassifier(src net dev0-in) -> ip_to_host;

// Packets from dev0-in:net either stay on local network or go to the wild.
// Those that go into the wild need to go through the appropriate rewriting
// element.  (Either UDP/TCP rewriter or ICMP rewriter.)
ipclass[2] -> inter_class :: IPClassifier(dst net dev0-in, -);
              inter_class[0] -> ip_to_intern;
              inter_class[1] -> ip_udp_class :: IPClassifier(tcp or udp,
                                                             icmp type echo);
                                ip_udp_class[0] -> Print("->0") -> [0]rw;
                                ip_udp_class[1] -> [0]irw;

Startup trace (nsec): print config done: 520169266
Startup trace (nsec): initialize elements: 523515474
Startup trace (nsec): initialize elements done: 527392217
[router_thread:250] Starting driver...


Received packet from device: 537495242 ns:  120 | 33330000 0016fee5 26976ae5 86dd6000 00000038 00010000
qemu-system-x86_64: terminating on signal 1 from pid 4090852 (sudo)
Bench-helper startup time (nsec): 672521460
path '/home/okelmann/appclick-ubpf/benchmark' does not contain a 'flake.nix', searching up
warning: Git tree '/home/okelmann/appclick-ubpf' is dirty
Using saved setting for 'extra-substituters = https://tum-dse.cachix.org' from ~/.local/share/nix/trusted-settings.json.
Using saved setting for 'extra-trusted-public-keys = tum-dse.cachix.org-1:v67rK18oLwgO0Z4b69l30SrV1yRtqxKpiHodG4YxhNM=' from ~/.local/share/nix/trusted-settings.json.
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.19s
     Running `target/debug/bench-helper`
c[?7l[2J[0mSeaBIOS (version rel-1.16.2-0-gea1b7a073390-prebuilt.qemu.org)


iPXE (http://ipxe.org) 00:03.0 CA00 PCI2.10 PnP PMM+BEFD0F40+BEF30F40 CA00
Press Ctrl-B to configure iPXE (PCI 00:03.0)...                                                                               


Booting from ROM..Powered by
o.   .o       _ _               __ _
Oo   Oo  ___ (_) | __ __  __ _ ' _) :_
oO   oO ' _ `| | |/ /  _)' _` | |_|  _)
oOo oOO| | | | |   (| | | (_) |  _) :_
 OoOoO ._, ._:_:_,\_._,  .__,_:_, \___)
         Telesto 0.16.3~e453b74a-custom
Startup trace (nsec): click main(): 107287148
Startup trace (nsec): print config: 108699670
Received config (length 5697):
define($MAC0 52:54:00:12:34:56);
/* End unikraft-provided MAC preamble */
// From: https://github.com/kohler/click/blob/master/conf/thomer-nat.click
// Slightly modified to be compatible with Click on Unikraft. Functionality not guaranteed.
//
// This Click configuration implements a firewall and NAT, roughly based on the
// mazu-nat.click example.
//
// This example assumes there is one interface that is IP-aliased.  In this
// example, dev0 and dev0:0 have IP addresses 66.68.65.90 and 192.168.1.1,
// respectively.  There is a local network, 192.168.1.0/24, and an upstream
// gateway, 66.58.65.89.  Traffic from the local network is NATed.
//
// Connections can be initiated from the NAT box itself, also.
// 
// For bugs, suggestions, and, corrections, please email me.
//
// Author: Thomer M. Gil (click@thomer.com)

define($DEV0 0)

AddressInfo(
    dev0-in     172.44.0.2    172.44.0.2/24    00:0d:87:9d:1c:e9,
    dev0-ex     172.44.0.3                     00:0d:87:9d:1c:e9,
    gw-addr     172.44.0.1                     00:20:6f:14:54:c2
);


elementclass SniffGatewayDevice {
  $device |
  from :: FromDevice($device)
    -> Print2('Received packet from device')
    -> t1 :: Tee
    -> output;
  input -> q :: Queue(1024)
    -> t2 :: PullTee
    -> to :: ToDevice($device);
  t1[1] -> ToDevice;
  t2[1] -> ToDevice($device);
  ScheduleInfo(from .1, to 1);
}


device :: SniffGatewayDevice($DEV0);
arpq_in :: ARPQuerier(dev0-in) -> device;
ip_to_extern :: GetIPAddress(16)
        -> CheckIPHeader
        -> EtherEncap(0x800, dev0-ex, gw-addr)
        -> device;
ip_to_host :: EtherEncap(0x800, gw-addr, dev0-ex)
        -> ToDevice;
ip_to_intern :: GetIPAddress(16)
        -> CheckIPHeader
        -> arpq_in;

                 
arp_class :: Classifier(
        12/0806 20/0001,        // [0] ARP requests
        12/0806 20/0002,        // [1] ARP replies to host
        12/0800);               // [2] IP packets

device -> arp_class;

// ARP crap
arp_class[0] -> ARPResponder(dev0-in, dev0-ex) -> device;
arp_class[1] -> arp_t :: Tee;
                arp_t[0] -> ToDevice;
                arp_t[1] -> [1]arpq_in;


// IP packets
arp_class[2] -> Strip(14)
   -> CheckIPHeader
   -> ipclass :: IPClassifier(dst host dev0-ex,
                              dst host dev0-in,
                              src net dev0-in);

// Define pattern NAT
iprw :: IPRewriterPatterns(NAT dev0-ex 50000-65535 - -);

// Rewriting rules for UDP/TCP packets
// output[0] rewritten to go into the wild
// output[1] rewritten to come back from the wild or no match
rw :: IPRewriter(pattern NAT 0 1,
                 pass 1);

// Rewriting rules for ICMP packets
irw :: ICMPPingRewriter(pass);
irw[0] -> ip_to_extern;
irw[1] -> icmp_me_or_intern :: IPClassifier(dst host dev0-ex, -);
          icmp_me_or_intern[0] -> ip_to_host;
          icmp_me_or_intern[1] -> ip_to_intern;

// Rewriting rules for ICMP error packets
ierw :: ICMPRewriter(rw irw);
ierw[0] -> icmp_me_or_intern;
ierw[1] -> icmp_me_or_intern;


// Packets directed at dev0-ex.
// Send it through IPRewriter(pass).  If there was a mapping, it will be
// rewritten such that dst is dev0-in:net, otherwise dst will still be for
// dev0-ex.
ipclass[0] -> Print("->1x") -> [1]rw;

// packets that were rewritten, heading into the wild world.
rw[0] -> Print("0->") -> ip_to_extern;

// packets that come back from the wild or are not part of an established
// connection.
rw[1] -> Print("1->") -> established_class :: IPClassifier(dst host dev0-ex,
                                           dst net dev0-in);

         // not established yet or returning packets for a connection that was
         // established from this host itself.
         established_class[0] ->
           firewall :: IPClassifier(dst tcp port ssh,
                                    dst tcp port smtp,
                                    dst tcp port domain,
                                    dst udp port domain,
                                    icmp type echo-reply,
                                    proto icmp,
                                    port > 4095,
                                    -);

                                    firewall[0] -> ip_to_host; // ssh
                                    firewall[1] -> ip_to_host; // smtp
                                    firewall[2] -> ip_to_host; // domain (t)
                                    firewall[3] -> ip_to_host; // domain (u)
                                    firewall[4] -> [0]irw;     // icmp reply
                                    firewall[5] -> [0]ierw;    // other icmp
                                    firewall[6] -> ip_to_host; // port > 4095, probably for connection
                                                               // originating from host itself
                                    firewall[7] -> Discard;    // don't allow incoming for port <= 4095

        // established connection
        established_class[1] -> ip_to_intern;

// To dev0-in.  Only accept from inside network.
ipclass[1] -> IPClassifier(src net dev0-in) -> ip_to_host;

// Packets from dev0-in:net either stay on local network or go to the wild.
// Those that go into the wild need to go through the appropriate rewriting
// element.  (Either UDP/TCP rewriter or ICMP rewriter.)
ipclass[2] -> inter_class :: IPClassifier(dst net dev0-in, -);
              inter_class[0] -> ip_to_intern;
              inter_class[1] -> ip_udp_class :: IPClassifier(tcp or udp,
                                                             icmp type echo);
                                ip_udp_class[0] -> Print("->0") -> [0]rw;
                                ip_udp_class[1] -> [0]irw;

Startup trace (nsec): print config done: 521614136
Startup trace (nsec): initialize elements: 524968868
Startup trace (nsec): initialize elements done: 528889723
[router_thread:250] Starting driver...


Received packet from device: 539045804 ns:   72 | 01005e00 0016767e 90d49854 080046c0 00300000 40000102
qemu-system-x86_64: terminating on signal 1 from pid 4091075 (sudo)
Bench-helper startup time (nsec): 673540443
path '/home/okelmann/appclick-ubpf/benchmark' does not contain a 'flake.nix', searching up
warning: Git tree '/home/okelmann/appclick-ubpf' is dirty
Using saved setting for 'extra-substituters = https://tum-dse.cachix.org' from ~/.local/share/nix/trusted-settings.json.
Using saved setting for 'extra-trusted-public-keys = tum-dse.cachix.org-1:v67rK18oLwgO0Z4b69l30SrV1yRtqxKpiHodG4YxhNM=' from ~/.local/share/nix/trusted-settings.json.
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.19s
     Running `target/debug/bench-helper`
c[?7l[2J[0mSeaBIOS (version rel-1.16.2-0-gea1b7a073390-prebuilt.qemu.org)


iPXE (http://ipxe.org) 00:03.0 CA00 PCI2.10 PnP PMM+BEFD0F40+BEF30F40 CA00
Press Ctrl-B to configure iPXE (PCI 00:03.0)...                                                                               


Booting from ROM..Powered by
o.   .o       _ _               __ _
Oo   Oo  ___ (_) | __ __  __ _ ' _) :_
oO   oO ' _ `| | |/ /  _)' _` | |_|  _)
oOo oOO| | | | |   (| | | (_) |  _) :_
 OoOoO ._, ._:_:_,\_._,  .__,_:_, \___)
         Telesto 0.16.3~e453b74a-custom
Startup trace (nsec): click main(): 107268409
Startup trace (nsec): print config: 108695672
Received config (length 5697):
define($MAC0 52:54:00:12:34:56);
/* End unikraft-provided MAC preamble */
// From: https://github.com/kohler/click/blob/master/conf/thomer-nat.click
// Slightly modified to be compatible with Click on Unikraft. Functionality not guaranteed.
//
// This Click configuration implements a firewall and NAT, roughly based on the
// mazu-nat.click example.
//
// This example assumes there is one interface that is IP-aliased.  In this
// example, dev0 and dev0:0 have IP addresses 66.68.65.90 and 192.168.1.1,
// respectively.  There is a local network, 192.168.1.0/24, and an upstream
// gateway, 66.58.65.89.  Traffic from the local network is NATed.
//
// Connections can be initiated from the NAT box itself, also.
// 
// For bugs, suggestions, and, corrections, please email me.
//
// Author: Thomer M. Gil (click@thomer.com)

define($DEV0 0)

AddressInfo(
    dev0-in     172.44.0.2    172.44.0.2/24    00:0d:87:9d:1c:e9,
    dev0-ex     172.44.0.3                     00:0d:87:9d:1c:e9,
    gw-addr     172.44.0.1                     00:20:6f:14:54:c2
);


elementclass SniffGatewayDevice {
  $device |
  from :: FromDevice($device)
    -> Print2('Received packet from device')
    -> t1 :: Tee
    -> output;
  input -> q :: Queue(1024)
    -> t2 :: PullTee
    -> to :: ToDevice($device);
  t1[1] -> ToDevice;
  t2[1] -> ToDevice($device);
  ScheduleInfo(from .1, to 1);
}


device :: SniffGatewayDevice($DEV0);
arpq_in :: ARPQuerier(dev0-in) -> device;
ip_to_extern :: GetIPAddress(16)
        -> CheckIPHeader
        -> EtherEncap(0x800, dev0-ex, gw-addr)
        -> device;
ip_to_host :: EtherEncap(0x800, gw-addr, dev0-ex)
        -> ToDevice;
ip_to_intern :: GetIPAddress(16)
        -> CheckIPHeader
        -> arpq_in;

                 
arp_class :: Classifier(
        12/0806 20/0001,        // [0] ARP requests
        12/0806 20/0002,        // [1] ARP replies to host
        12/0800);               // [2] IP packets

device -> arp_class;

// ARP crap
arp_class[0] -> ARPResponder(dev0-in, dev0-ex) -> device;
arp_class[1] -> arp_t :: Tee;
                arp_t[0] -> ToDevice;
                arp_t[1] -> [1]arpq_in;


// IP packets
arp_class[2] -> Strip(14)
   -> CheckIPHeader
   -> ipclass :: IPClassifier(dst host dev0-ex,
                              dst host dev0-in,
                              src net dev0-in);

// Define pattern NAT
iprw :: IPRewriterPatterns(NAT dev0-ex 50000-65535 - -);

// Rewriting rules for UDP/TCP packets
// output[0] rewritten to go into the wild
// output[1] rewritten to come back from the wild or no match
rw :: IPRewriter(pattern NAT 0 1,
                 pass 1);

// Rewriting rules for ICMP packets
irw :: ICMPPingRewriter(pass);
irw[0] -> ip_to_extern;
irw[1] -> icmp_me_or_intern :: IPClassifier(dst host dev0-ex, -);
          icmp_me_or_intern[0] -> ip_to_host;
          icmp_me_or_intern[1] -> ip_to_intern;

// Rewriting rules for ICMP error packets
ierw :: ICMPRewriter(rw irw);
ierw[0] -> icmp_me_or_intern;
ierw[1] -> icmp_me_or_intern;


// Packets directed at dev0-ex.
// Send it through IPRewriter(pass).  If there was a mapping, it will be
// rewritten such that dst is dev0-in:net, otherwise dst will still be for
// dev0-ex.
ipclass[0] -> Print("->1x") -> [1]rw;

// packets that were rewritten, heading into the wild world.
rw[0] -> Print("0->") -> ip_to_extern;

// packets that come back from the wild or are not part of an established
// connection.
rw[1] -> Print("1->") -> established_class :: IPClassifier(dst host dev0-ex,
                                           dst net dev0-in);

         // not established yet or returning packets for a connection that was
         // established from this host itself.
         established_class[0] ->
           firewall :: IPClassifier(dst tcp port ssh,
                                    dst tcp port smtp,
                                    dst tcp port domain,
                                    dst udp port domain,
                                    icmp type echo-reply,
                                    proto icmp,
                                    port > 4095,
                                    -);

                                    firewall[0] -> ip_to_host; // ssh
                                    firewall[1] -> ip_to_host; // smtp
                                    firewall[2] -> ip_to_host; // domain (t)
                                    firewall[3] -> ip_to_host; // domain (u)
                                    firewall[4] -> [0]irw;     // icmp reply
                                    firewall[5] -> [0]ierw;    // other icmp
                                    firewall[6] -> ip_to_host; // port > 4095, probably for connection
                                                               // originating from host itself
                                    firewall[7] -> Discard;    // don't allow incoming for port <= 4095

        // established connection
        established_class[1] -> ip_to_intern;

// To dev0-in.  Only accept from inside network.
ipclass[1] -> IPClassifier(src net dev0-in) -> ip_to_host;

// Packets from dev0-in:net either stay on local network or go to the wild.
// Those that go into the wild need to go through the appropriate rewriting
// element.  (Either UDP/TCP rewriter or ICMP rewriter.)
ipclass[2] -> inter_class :: IPClassifier(dst net dev0-in, -);
              inter_class[0] -> ip_to_intern;
              inter_class[1] -> ip_udp_class :: IPClassifier(tcp or udp,
                                                             icmp type echo);
                                ip_udp_class[0] -> Print("->0") -> [0]rw;
                                ip_udp_class[1] -> [0]irw;

Startup trace (nsec): print config done: 520131165
Startup trace (nsec): initialize elements: 523477162
Startup trace (nsec): initialize elements done: 527389043
[router_thread:250] Starting driver...


Received packet from device: 537530524 ns:   72 | 01005e00 0016767e 90d49854 080046c0 00300000 40000102
qemu-system-x86_64: terminating on signal 1 from pid 4091296 (sudo)
Bench-helper startup time (nsec): 672514930
path '/home/okelmann/appclick-ubpf/benchmark' does not contain a 'flake.nix', searching up
warning: Git tree '/home/okelmann/appclick-ubpf' is dirty
Using saved setting for 'extra-substituters = https://tum-dse.cachix.org' from ~/.local/share/nix/trusted-settings.json.
Using saved setting for 'extra-trusted-public-keys = tum-dse.cachix.org-1:v67rK18oLwgO0Z4b69l30SrV1yRtqxKpiHodG4YxhNM=' from ~/.local/share/nix/trusted-settings.json.
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.18s
     Running `target/debug/bench-helper`
c[?7l[2J[0mSeaBIOS (version rel-1.16.2-0-gea1b7a073390-prebuilt.qemu.org)


iPXE (http://ipxe.org) 00:03.0 CA00 PCI2.10 PnP PMM+BEFD0F40+BEF30F40 CA00
Press Ctrl-B to configure iPXE (PCI 00:03.0)...                                                                               


Booting from ROM..Powered by
o.   .o       _ _               __ _
Oo   Oo  ___ (_) | __ __  __ _ ' _) :_
oO   oO ' _ `| | |/ /  _)' _` | |_|  _)
oOo oOO| | | | |   (| | | (_) |  _) :_
 OoOoO ._, ._:_:_,\_._,  .__,_:_, \___)
         Telesto 0.16.3~e453b74a-custom
Startup trace (nsec): click main(): 107327637
Startup trace (nsec): print config: 108758436
Received config (length 5697):
define($MAC0 52:54:00:12:34:56);
/* End unikraft-provided MAC preamble */
// From: https://github.com/kohler/click/blob/master/conf/thomer-nat.click
// Slightly modified to be compatible with Click on Unikraft. Functionality not guaranteed.
//
// This Click configuration implements a firewall and NAT, roughly based on the
// mazu-nat.click example.
//
// This example assumes there is one interface that is IP-aliased.  In this
// example, dev0 and dev0:0 have IP addresses 66.68.65.90 and 192.168.1.1,
// respectively.  There is a local network, 192.168.1.0/24, and an upstream
// gateway, 66.58.65.89.  Traffic from the local network is NATed.
//
// Connections can be initiated from the NAT box itself, also.
// 
// For bugs, suggestions, and, corrections, please email me.
//
// Author: Thomer M. Gil (click@thomer.com)

define($DEV0 0)

AddressInfo(
    dev0-in     172.44.0.2    172.44.0.2/24    00:0d:87:9d:1c:e9,
    dev0-ex     172.44.0.3                     00:0d:87:9d:1c:e9,
    gw-addr     172.44.0.1                     00:20:6f:14:54:c2
);


elementclass SniffGatewayDevice {
  $device |
  from :: FromDevice($device)
    -> Print2('Received packet from device')
    -> t1 :: Tee
    -> output;
  input -> q :: Queue(1024)
    -> t2 :: PullTee
    -> to :: ToDevice($device);
  t1[1] -> ToDevice;
  t2[1] -> ToDevice($device);
  ScheduleInfo(from .1, to 1);
}


device :: SniffGatewayDevice($DEV0);
arpq_in :: ARPQuerier(dev0-in) -> device;
ip_to_extern :: GetIPAddress(16)
        -> CheckIPHeader
        -> EtherEncap(0x800, dev0-ex, gw-addr)
        -> device;
ip_to_host :: EtherEncap(0x800, gw-addr, dev0-ex)
        -> ToDevice;
ip_to_intern :: GetIPAddress(16)
        -> CheckIPHeader
        -> arpq_in;

                 
arp_class :: Classifier(
        12/0806 20/0001,        // [0] ARP requests
        12/0806 20/0002,        // [1] ARP replies to host
        12/0800);               // [2] IP packets

device -> arp_class;

// ARP crap
arp_class[0] -> ARPResponder(dev0-in, dev0-ex) -> device;
arp_class[1] -> arp_t :: Tee;
                arp_t[0] -> ToDevice;
                arp_t[1] -> [1]arpq_in;


// IP packets
arp_class[2] -> Strip(14)
   -> CheckIPHeader
   -> ipclass :: IPClassifier(dst host dev0-ex,
                              dst host dev0-in,
                              src net dev0-in);

// Define pattern NAT
iprw :: IPRewriterPatterns(NAT dev0-ex 50000-65535 - -);

// Rewriting rules for UDP/TCP packets
// output[0] rewritten to go into the wild
// output[1] rewritten to come back from the wild or no match
rw :: IPRewriter(pattern NAT 0 1,
                 pass 1);

// Rewriting rules for ICMP packets
irw :: ICMPPingRewriter(pass);
irw[0] -> ip_to_extern;
irw[1] -> icmp_me_or_intern :: IPClassifier(dst host dev0-ex, -);
          icmp_me_or_intern[0] -> ip_to_host;
          icmp_me_or_intern[1] -> ip_to_intern;

// Rewriting rules for ICMP error packets
ierw :: ICMPRewriter(rw irw);
ierw[0] -> icmp_me_or_intern;
ierw[1] -> icmp_me_or_intern;


// Packets directed at dev0-ex.
// Send it through IPRewriter(pass).  If there was a mapping, it will be
// rewritten such that dst is dev0-in:net, otherwise dst will still be for
// dev0-ex.
ipclass[0] -> Print("->1x") -> [1]rw;

// packets that were rewritten, heading into the wild world.
rw[0] -> Print("0->") -> ip_to_extern;

// packets that come back from the wild or are not part of an established
// connection.
rw[1] -> Print("1->") -> established_class :: IPClassifier(dst host dev0-ex,
                                           dst net dev0-in);

         // not established yet or returning packets for a connection that was
         // established from this host itself.
         established_class[0] ->
           firewall :: IPClassifier(dst tcp port ssh,
                                    dst tcp port smtp,
                                    dst tcp port domain,
                                    dst udp port domain,
                                    icmp type echo-reply,
                                    proto icmp,
                                    port > 4095,
                                    -);

                                    firewall[0] -> ip_to_host; // ssh
                                    firewall[1] -> ip_to_host; // smtp
                                    firewall[2] -> ip_to_host; // domain (t)
                                    firewall[3] -> ip_to_host; // domain (u)
                                    firewall[4] -> [0]irw;     // icmp reply
                                    firewall[5] -> [0]ierw;    // other icmp
                                    firewall[6] -> ip_to_host; // port > 4095, probably for connection
                                                               // originating from host itself
                                    firewall[7] -> Discard;    // don't allow incoming for port <= 4095

        // established connection
        established_class[1] -> ip_to_intern;

// To dev0-in.  Only accept from inside network.
ipclass[1] -> IPClassifier(src net dev0-in) -> ip_to_host;

// Packets from dev0-in:net either stay on local network or go to the wild.
// Those that go into the wild need to go through the appropriate rewriting
// element.  (Either UDP/TCP rewriter or ICMP rewriter.)
ipclass[2] -> inter_class :: IPClassifier(dst net dev0-in, -);
              inter_class[0] -> ip_to_intern;
              inter_class[1] -> ip_udp_class :: IPClassifier(tcp or udp,
                                                             icmp type echo);
                                ip_udp_class[0] -> Print("->0") -> [0]rw;
                                ip_udp_class[1] -> [0]irw;

Startup trace (nsec): print config done: 522694606
Startup trace (nsec): initialize elements: 526055629
Startup trace (nsec): initialize elements done: 529911017
[router_thread:250] Starting driver...


Received packet from device: 539972057 ns:   72 | 01005e00 0016767e 90d49854 080046c0 00300000 40000102
qemu-system-x86_64: terminating on signal 1 from pid 4091520 (sudo)
Bench-helper startup time (nsec): 674933911
path '/home/okelmann/appclick-ubpf/benchmark' does not contain a 'flake.nix', searching up
warning: Git tree '/home/okelmann/appclick-ubpf' is dirty
Using saved setting for 'extra-substituters = https://tum-dse.cachix.org' from ~/.local/share/nix/trusted-settings.json.
Using saved setting for 'extra-trusted-public-keys = tum-dse.cachix.org-1:v67rK18oLwgO0Z4b69l30SrV1yRtqxKpiHodG4YxhNM=' from ~/.local/share/nix/trusted-settings.json.
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.18s
     Running `target/debug/bench-helper`
c[?7l[2J[0mSeaBIOS (version rel-1.16.2-0-gea1b7a073390-prebuilt.qemu.org)


iPXE (http://ipxe.org) 00:03.0 CA00 PCI2.10 PnP PMM+BEFD0F40+BEF30F40 CA00
Press Ctrl-B to configure iPXE (PCI 00:03.0)...                                                                               


Booting from ROM..Powered by
o.   .o       _ _               __ _
Oo   Oo  ___ (_) | __ __  __ _ ' _) :_
oO   oO ' _ `| | |/ /  _)' _` | |_|  _)
oOo oOO| | | | |   (| | | (_) |  _) :_
 OoOoO ._, ._:_:_,\_._,  .__,_:_, \___)
         Telesto 0.16.3~e453b74a-custom
Startup trace (nsec): click main(): 107318899
Startup trace (nsec): print config: 108737011
Received config (length 5697):
define($MAC0 52:54:00:12:34:56);
/* End unikraft-provided MAC preamble */
// From: https://github.com/kohler/click/blob/master/conf/thomer-nat.click
// Slightly modified to be compatible with Click on Unikraft. Functionality not guaranteed.
//
// This Click configuration implements a firewall and NAT, roughly based on the
// mazu-nat.click example.
//
// This example assumes there is one interface that is IP-aliased.  In this
// example, dev0 and dev0:0 have IP addresses 66.68.65.90 and 192.168.1.1,
// respectively.  There is a local network, 192.168.1.0/24, and an upstream
// gateway, 66.58.65.89.  Traffic from the local network is NATed.
//
// Connections can be initiated from the NAT box itself, also.
// 
// For bugs, suggestions, and, corrections, please email me.
//
// Author: Thomer M. Gil (click@thomer.com)

define($DEV0 0)

AddressInfo(
    dev0-in     172.44.0.2    172.44.0.2/24    00:0d:87:9d:1c:e9,
    dev0-ex     172.44.0.3                     00:0d:87:9d:1c:e9,
    gw-addr     172.44.0.1                     00:20:6f:14:54:c2
);


elementclass SniffGatewayDevice {
  $device |
  from :: FromDevice($device)
    -> Print2('Received packet from device')
    -> t1 :: Tee
    -> output;
  input -> q :: Queue(1024)
    -> t2 :: PullTee
    -> to :: ToDevice($device);
  t1[1] -> ToDevice;
  t2[1] -> ToDevice($device);
  ScheduleInfo(from .1, to 1);
}


device :: SniffGatewayDevice($DEV0);
arpq_in :: ARPQuerier(dev0-in) -> device;
ip_to_extern :: GetIPAddress(16)
        -> CheckIPHeader
        -> EtherEncap(0x800, dev0-ex, gw-addr)
        -> device;
ip_to_host :: EtherEncap(0x800, gw-addr, dev0-ex)
        -> ToDevice;
ip_to_intern :: GetIPAddress(16)
        -> CheckIPHeader
        -> arpq_in;

                 
arp_class :: Classifier(
        12/0806 20/0001,        // [0] ARP requests
        12/0806 20/0002,        // [1] ARP replies to host
        12/0800);               // [2] IP packets

device -> arp_class;

// ARP crap
arp_class[0] -> ARPResponder(dev0-in, dev0-ex) -> device;
arp_class[1] -> arp_t :: Tee;
                arp_t[0] -> ToDevice;
                arp_t[1] -> [1]arpq_in;


// IP packets
arp_class[2] -> Strip(14)
   -> CheckIPHeader
   -> ipclass :: IPClassifier(dst host dev0-ex,
                              dst host dev0-in,
                              src net dev0-in);

// Define pattern NAT
iprw :: IPRewriterPatterns(NAT dev0-ex 50000-65535 - -);

// Rewriting rules for UDP/TCP packets
// output[0] rewritten to go into the wild
// output[1] rewritten to come back from the wild or no match
rw :: IPRewriter(pattern NAT 0 1,
                 pass 1);

// Rewriting rules for ICMP packets
irw :: ICMPPingRewriter(pass);
irw[0] -> ip_to_extern;
irw[1] -> icmp_me_or_intern :: IPClassifier(dst host dev0-ex, -);
          icmp_me_or_intern[0] -> ip_to_host;
          icmp_me_or_intern[1] -> ip_to_intern;

// Rewriting rules for ICMP error packets
ierw :: ICMPRewriter(rw irw);
ierw[0] -> icmp_me_or_intern;
ierw[1] -> icmp_me_or_intern;


// Packets directed at dev0-ex.
// Send it through IPRewriter(pass).  If there was a mapping, it will be
// rewritten such that dst is dev0-in:net, otherwise dst will still be for
// dev0-ex.
ipclass[0] -> Print("->1x") -> [1]rw;

// packets that were rewritten, heading into the wild world.
rw[0] -> Print("0->") -> ip_to_extern;

// packets that come back from the wild or are not part of an established
// connection.
rw[1] -> Print("1->") -> established_class :: IPClassifier(dst host dev0-ex,
                                           dst net dev0-in);

         // not established yet or returning packets for a connection that was
         // established from this host itself.
         established_class[0] ->
           firewall :: IPClassifier(dst tcp port ssh,
                                    dst tcp port smtp,
                                    dst tcp port domain,
                                    dst udp port domain,
                                    icmp type echo-reply,
                                    proto icmp,
                                    port > 4095,
                                    -);

                                    firewall[0] -> ip_to_host; // ssh
                                    firewall[1] -> ip_to_host; // smtp
                                    firewall[2] -> ip_to_host; // domain (t)
                                    firewall[3] -> ip_to_host; // domain (u)
                                    firewall[4] -> [0]irw;     // icmp reply
                                    firewall[5] -> [0]ierw;    // other icmp
                                    firewall[6] -> ip_to_host; // port > 4095, probably for connection
                                                               // originating from host itself
                                    firewall[7] -> Discard;    // don't allow incoming for port <= 4095

        // established connection
        established_class[1] -> ip_to_intern;

// To dev0-in.  Only accept from inside network.
ipclass[1] -> IPClassifier(src net dev0-in) -> ip_to_host;

// Packets from dev0-in:net either stay on local network or go to the wild.
// Those that go into the wild need to go through the appropriate rewriting
// element.  (Either UDP/TCP rewriter or ICMP rewriter.)
ipclass[2] -> inter_class :: IPClassifier(dst net dev0-in, -);
              inter_class[0] -> ip_to_intern;
              inter_class[1] -> ip_udp_class :: IPClassifier(tcp or udp,
                                                             icmp type echo);
                                ip_udp_class[0] -> Print("->0") -> [0]rw;
                                ip_udp_class[1] -> [0]irw;

Startup trace (nsec): print config done: 521906932
Startup trace (nsec): initialize elements: 525271732
Startup trace (nsec): initialize elements done: 529203985
[router_thread:250] Starting driver...


Received packet from device: 539392113 ns:   72 | 01005e00 0016767e 90d49854 080046c0 00300000 40000102
qemu-system-x86_64: terminating on signal 1 from pid 4091744 (sudo)
Bench-helper startup time (nsec): 674315320
path '/home/okelmann/appclick-ubpf/benchmark' does not contain a 'flake.nix', searching up
warning: Git tree '/home/okelmann/appclick-ubpf' is dirty
Using saved setting for 'extra-substituters = https://tum-dse.cachix.org' from ~/.local/share/nix/trusted-settings.json.
Using saved setting for 'extra-trusted-public-keys = tum-dse.cachix.org-1:v67rK18oLwgO0Z4b69l30SrV1yRtqxKpiHodG4YxhNM=' from ~/.local/share/nix/trusted-settings.json.
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.18s
     Running `target/debug/bench-helper`
c[?7l[2J[0mSeaBIOS (version rel-1.16.2-0-gea1b7a073390-prebuilt.qemu.org)


iPXE (http://ipxe.org) 00:03.0 CA00 PCI2.10 PnP PMM+BEFD0F40+BEF30F40 CA00
Press Ctrl-B to configure iPXE (PCI 00:03.0)...                                                                               


Booting from ROM..Powered by
o.   .o       _ _               __ _
Oo   Oo  ___ (_) | __ __  __ _ ' _) :_
oO   oO ' _ `| | |/ /  _)' _` | |_|  _)
oOo oOO| | | | |   (| | | (_) |  _) :_
 OoOoO ._, ._:_:_,\_._,  .__,_:_, \___)
         Telesto 0.16.3~e453b74a-custom
Startup trace (nsec): click main(): 107204146
Startup trace (nsec): print config: 108611754
Received config (length 5697):
define($MAC0 52:54:00:12:34:56);
/* End unikraft-provided MAC preamble */
// From: https://github.com/kohler/click/blob/master/conf/thomer-nat.click
// Slightly modified to be compatible with Click on Unikraft. Functionality not guaranteed.
//
// This Click configuration implements a firewall and NAT, roughly based on the
// mazu-nat.click example.
//
// This example assumes there is one interface that is IP-aliased.  In this
// example, dev0 and dev0:0 have IP addresses 66.68.65.90 and 192.168.1.1,
// respectively.  There is a local network, 192.168.1.0/24, and an upstream
// gateway, 66.58.65.89.  Traffic from the local network is NATed.
//
// Connections can be initiated from the NAT box itself, also.
// 
// For bugs, suggestions, and, corrections, please email me.
//
// Author: Thomer M. Gil (click@thomer.com)

define($DEV0 0)

AddressInfo(
    dev0-in     172.44.0.2    172.44.0.2/24    00:0d:87:9d:1c:e9,
    dev0-ex     172.44.0.3                     00:0d:87:9d:1c:e9,
    gw-addr     172.44.0.1                     00:20:6f:14:54:c2
);


elementclass SniffGatewayDevice {
  $device |
  from :: FromDevice($device)
    -> Print2('Received packet from device')
    -> t1 :: Tee
    -> output;
  input -> q :: Queue(1024)
    -> t2 :: PullTee
    -> to :: ToDevice($device);
  t1[1] -> ToDevice;
  t2[1] -> ToDevice($device);
  ScheduleInfo(from .1, to 1);
}


device :: SniffGatewayDevice($DEV0);
arpq_in :: ARPQuerier(dev0-in) -> device;
ip_to_extern :: GetIPAddress(16)
        -> CheckIPHeader
        -> EtherEncap(0x800, dev0-ex, gw-addr)
        -> device;
ip_to_host :: EtherEncap(0x800, gw-addr, dev0-ex)
        -> ToDevice;
ip_to_intern :: GetIPAddress(16)
        -> CheckIPHeader
        -> arpq_in;

                 
arp_class :: Classifier(
        12/0806 20/0001,        // [0] ARP requests
        12/0806 20/0002,        // [1] ARP replies to host
        12/0800);               // [2] IP packets

device -> arp_class;

// ARP crap
arp_class[0] -> ARPResponder(dev0-in, dev0-ex) -> device;
arp_class[1] -> arp_t :: Tee;
                arp_t[0] -> ToDevice;
                arp_t[1] -> [1]arpq_in;


// IP packets
arp_class[2] -> Strip(14)
   -> CheckIPHeader
   -> ipclass :: IPClassifier(dst host dev0-ex,
                              dst host dev0-in,
                              src net dev0-in);

// Define pattern NAT
iprw :: IPRewriterPatterns(NAT dev0-ex 50000-65535 - -);

// Rewriting rules for UDP/TCP packets
// output[0] rewritten to go into the wild
// output[1] rewritten to come back from the wild or no match
rw :: IPRewriter(pattern NAT 0 1,
                 pass 1);

// Rewriting rules for ICMP packets
irw :: ICMPPingRewriter(pass);
irw[0] -> ip_to_extern;
irw[1] -> icmp_me_or_intern :: IPClassifier(dst host dev0-ex, -);
          icmp_me_or_intern[0] -> ip_to_host;
          icmp_me_or_intern[1] -> ip_to_intern;

// Rewriting rules for ICMP error packets
ierw :: ICMPRewriter(rw irw);
ierw[0] -> icmp_me_or_intern;
ierw[1] -> icmp_me_or_intern;


// Packets directed at dev0-ex.
// Send it through IPRewriter(pass).  If there was a mapping, it will be
// rewritten such that dst is dev0-in:net, otherwise dst will still be for
// dev0-ex.
ipclass[0] -> Print("->1x") -> [1]rw;

// packets that were rewritten, heading into the wild world.
rw[0] -> Print("0->") -> ip_to_extern;

// packets that come back from the wild or are not part of an established
// connection.
rw[1] -> Print("1->") -> established_class :: IPClassifier(dst host dev0-ex,
                                           dst net dev0-in);

         // not established yet or returning packets for a connection that was
         // established from this host itself.
         established_class[0] ->
           firewall :: IPClassifier(dst tcp port ssh,
                                    dst tcp port smtp,
                                    dst tcp port domain,
                                    dst udp port domain,
                                    icmp type echo-reply,
                                    proto icmp,
                                    port > 4095,
                                    -);

                                    firewall[0] -> ip_to_host; // ssh
                                    firewall[1] -> ip_to_host; // smtp
                                    firewall[2] -> ip_to_host; // domain (t)
                                    firewall[3] -> ip_to_host; // domain (u)
                                    firewall[4] -> [0]irw;     // icmp reply
                                    firewall[5] -> [0]ierw;    // other icmp
                                    firewall[6] -> ip_to_host; // port > 4095, probably for connection
                                                               // originating from host itself
                                    firewall[7] -> Discard;    // don't allow incoming for port <= 4095

        // established connection
        established_class[1] -> ip_to_intern;

// To dev0-in.  Only accept from inside network.
ipclass[1] -> IPClassifier(src net dev0-in) -> ip_to_host;

// Packets from dev0-in:net either stay on local network or go to the wild.
// Those that go into the wild need to go through the appropriate rewriting
// element.  (Either UDP/TCP rewriter or ICMP rewriter.)
ipclass[2] -> inter_class :: IPClassifier(dst net dev0-in, -);
              inter_class[0] -> ip_to_intern;
              inter_class[1] -> ip_udp_class :: IPClassifier(tcp or udp,
                                                             icmp type echo);
                                ip_udp_class[0] -> Print("->0") -> [0]rw;
                                ip_udp_class[1] -> [0]irw;

Startup trace (nsec): print config done: 517957847
Startup trace (nsec): initialize elements: 521286296
Startup trace (nsec): initialize elements done: 525178000
[router_thread:250] Starting driver...


Received packet from device: 535242735 ns:   72 | 01005e00 0016767e 90d49854 080046c0 00300000 40000102
qemu-system-x86_64: terminating on signal 1 from pid 4091966 (sudo)
Bench-helper startup time (nsec): 669981105
path '/home/okelmann/appclick-ubpf/benchmark' does not contain a 'flake.nix', searching up
warning: Git tree '/home/okelmann/appclick-ubpf' is dirty
Using saved setting for 'extra-substituters = https://tum-dse.cachix.org' from ~/.local/share/nix/trusted-settings.json.
Using saved setting for 'extra-trusted-public-keys = tum-dse.cachix.org-1:v67rK18oLwgO0Z4b69l30SrV1yRtqxKpiHodG4YxhNM=' from ~/.local/share/nix/trusted-settings.json.
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.18s
     Running `target/debug/bench-helper`
c[?7l[2J[0mSeaBIOS (version rel-1.16.2-0-gea1b7a073390-prebuilt.qemu.org)


iPXE (http://ipxe.org) 00:03.0 CA00 PCI2.10 PnP PMM+BEFD0F40+BEF30F40 CA00
Press Ctrl-B to configure iPXE (PCI 00:03.0)...                                                                               


Booting from ROM..Powered by
o.   .o       _ _               __ _
Oo   Oo  ___ (_) | __ __  __ _ ' _) :_
oO   oO ' _ `| | |/ /  _)' _` | |_|  _)
oOo oOO| | | | |   (| | | (_) |  _) :_
 OoOoO ._, ._:_:_,\_._,  .__,_:_, \___)
         Telesto 0.16.3~e453b74a-custom
Startup trace (nsec): click main(): 107225669
Startup trace (nsec): print config: 108640465
Received config (length 5697):
define($MAC0 52:54:00:12:34:56);
/* End unikraft-provided MAC preamble */
// From: https://github.com/kohler/click/blob/master/conf/thomer-nat.click
// Slightly modified to be compatible with Click on Unikraft. Functionality not guaranteed.
//
// This Click configuration implements a firewall and NAT, roughly based on the
// mazu-nat.click example.
//
// This example assumes there is one interface that is IP-aliased.  In this
// example, dev0 and dev0:0 have IP addresses 66.68.65.90 and 192.168.1.1,
// respectively.  There is a local network, 192.168.1.0/24, and an upstream
// gateway, 66.58.65.89.  Traffic from the local network is NATed.
//
// Connections can be initiated from the NAT box itself, also.
// 
// For bugs, suggestions, and, corrections, please email me.
//
// Author: Thomer M. Gil (click@thomer.com)

define($DEV0 0)

AddressInfo(
    dev0-in     172.44.0.2    172.44.0.2/24    00:0d:87:9d:1c:e9,
    dev0-ex     172.44.0.3                     00:0d:87:9d:1c:e9,
    gw-addr     172.44.0.1                     00:20:6f:14:54:c2
);


elementclass SniffGatewayDevice {
  $device |
  from :: FromDevice($device)
    -> Print2('Received packet from device')
    -> t1 :: Tee
    -> output;
  input -> q :: Queue(1024)
    -> t2 :: PullTee
    -> to :: ToDevice($device);
  t1[1] -> ToDevice;
  t2[1] -> ToDevice($device);
  ScheduleInfo(from .1, to 1);
}


device :: SniffGatewayDevice($DEV0);
arpq_in :: ARPQuerier(dev0-in) -> device;
ip_to_extern :: GetIPAddress(16)
        -> CheckIPHeader
        -> EtherEncap(0x800, dev0-ex, gw-addr)
        -> device;
ip_to_host :: EtherEncap(0x800, gw-addr, dev0-ex)
        -> ToDevice;
ip_to_intern :: GetIPAddress(16)
        -> CheckIPHeader
        -> arpq_in;

                 
arp_class :: Classifier(
        12/0806 20/0001,        // [0] ARP requests
        12/0806 20/0002,        // [1] ARP replies to host
        12/0800);               // [2] IP packets

device -> arp_class;

// ARP crap
arp_class[0] -> ARPResponder(dev0-in, dev0-ex) -> device;
arp_class[1] -> arp_t :: Tee;
                arp_t[0] -> ToDevice;
                arp_t[1] -> [1]arpq_in;


// IP packets
arp_class[2] -> Strip(14)
   -> CheckIPHeader
   -> ipclass :: IPClassifier(dst host dev0-ex,
                              dst host dev0-in,
                              src net dev0-in);

// Define pattern NAT
iprw :: IPRewriterPatterns(NAT dev0-ex 50000-65535 - -);

// Rewriting rules for UDP/TCP packets
// output[0] rewritten to go into the wild
// output[1] rewritten to come back from the wild or no match
rw :: IPRewriter(pattern NAT 0 1,
                 pass 1);

// Rewriting rules for ICMP packets
irw :: ICMPPingRewriter(pass);
irw[0] -> ip_to_extern;
irw[1] -> icmp_me_or_intern :: IPClassifier(dst host dev0-ex, -);
          icmp_me_or_intern[0] -> ip_to_host;
          icmp_me_or_intern[1] -> ip_to_intern;

// Rewriting rules for ICMP error packets
ierw :: ICMPRewriter(rw irw);
ierw[0] -> icmp_me_or_intern;
ierw[1] -> icmp_me_or_intern;


// Packets directed at dev0-ex.
// Send it through IPRewriter(pass).  If there was a mapping, it will be
// rewritten such that dst is dev0-in:net, otherwise dst will still be for
// dev0-ex.
ipclass[0] -> Print("->1x") -> [1]rw;

// packets that were rewritten, heading into the wild world.
rw[0] -> Print("0->") -> ip_to_extern;

// packets that come back from the wild or are not part of an established
// connection.
rw[1] -> Print("1->") -> established_class :: IPClassifier(dst host dev0-ex,
                                           dst net dev0-in);

         // not established yet or returning packets for a connection that was
         // established from this host itself.
         established_class[0] ->
           firewall :: IPClassifier(dst tcp port ssh,
                                    dst tcp port smtp,
                                    dst tcp port domain,
                                    dst udp port domain,
                                    icmp type echo-reply,
                                    proto icmp,
                                    port > 4095,
                                    -);

                                    firewall[0] -> ip_to_host; // ssh
                                    firewall[1] -> ip_to_host; // smtp
                                    firewall[2] -> ip_to_host; // domain (t)
                                    firewall[3] -> ip_to_host; // domain (u)
                                    firewall[4] -> [0]irw;     // icmp reply
                                    firewall[5] -> [0]ierw;    // other icmp
                                    firewall[6] -> ip_to_host; // port > 4095, probably for connection
                                                               // originating from host itself
                                    firewall[7] -> Discard;    // don't allow incoming for port <= 4095

        // established connection
        established_class[1] -> ip_to_intern;

// To dev0-in.  Only accept from inside network.
ipclass[1] -> IPClassifier(src net dev0-in) -> ip_to_host;

// Packets from dev0-in:net either stay on local network or go to the wild.
// Those that go into the wild need to go through the appropriate rewriting
// element.  (Either UDP/TCP rewriter or ICMP rewriter.)
ipclass[2] -> inter_class :: IPClassifier(dst net dev0-in, -);
              inter_class[0] -> ip_to_intern;
              inter_class[1] -> ip_udp_class :: IPClassifier(tcp or udp,
                                                             icmp type echo);
                                ip_udp_class[0] -> Print("->0") -> [0]rw;
                                ip_udp_class[1] -> [0]irw;

Startup trace (nsec): print config done: 520231988
Startup trace (nsec): initialize elements: 523573682
Startup trace (nsec): initialize elements done: 527485646
[router_thread:250] Starting driver...


Received packet from device: 537604863 ns:   72 | 01005e00 0016767e 90d49854 080046c0 00300000 40000102
qemu-system-x86_64: terminating on signal 1 from pid 4092187 (sudo)
Bench-helper startup time (nsec): 673483065
